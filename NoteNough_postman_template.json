{
	"info": {
		"_postman_id": "9517ea8d-81cb-450c-a55f-812984e41d43",
		"name": "NoteNough API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24394156"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"let lastEmail = requestBody.email || \"\";\r",
									"let lastPassword = requestBody.password || \"\";\r",
									"\r",
									"pm.environment.set(\"last_email\", lastEmail);\r",
									"pm.environment.set(\"last_password\", lastPassword);\r",
									"pm.environment.set(\"note_id\", 0);\r",
									"\r",
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{Port}}/api/auth/register",
							"host": [
								"{{base_url}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{Port}}/api/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{last_email}}\",\r\n    \"password\": \"{{last_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{Port}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"let lastEmail = requestBody.email || \"\";\r",
									"\r",
									"pm.environment.set(\"last_email\", lastEmail);\r",
									"\r",
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"currentPassword\": \"{{last_password}}\",\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{Port}}/api/auth/update",
							"host": [
								"{{base_url}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"\r",
									"let lastPassword = requestBody.password || \"\";\r",
									"\r",
									"pm.environment.set(\"last_password\", lastPassword);\r",
									"\r",
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"currentPassword\": \"{{last_password}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{Port}}/api/auth/update",
							"host": [
								"{{base_url}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid email format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/, \"Email is not in a valid format\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Password is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{Port}}/api/auth/user",
							"host": [
								"{{base_url}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"auth",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"last_email\", \"\");\r",
									"pm.environment.set(\"last_password\", \"\");\r",
									"\r",
									"pm.environment.set(\"note_id\", 0);\r",
									"\r",
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"currentPassword\": \"{{last_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{Port}}/api/auth/delete/",
							"host": [
								"{{base_url}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"auth",
								"delete",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Note",
			"item": [
				{
					"name": "Add Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"let responseBody = pm.response.json();\r",
									"\r",
									"let note_id = responseBody.key;\r",
									"\r",
									"pm.environment.set(\"note_id\", note_id);\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NzAxMTIwMDAsImlzcyI6IjEifQ.a0hCL7JRrtauFpRuczGc3KJ5nj4T4Pw9kHsWmbZhjI8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"{{$randomPhrase}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{Port}}/api/notes",
							"host": [
								"{{base_url}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(note) {\r",
									"        pm.expect(note).to.include.all.keys('key', 'text', 'created', 'updated', 'userId', 'user');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Key is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.key).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NzAxMTIwMDAsImlzcyI6IjEifQ.a0hCL7JRrtauFpRuczGc3KJ5nj4T4Pw9kHsWmbZhjI8",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}:{{Port}}/api/notes",
							"host": [
								"{{base_url}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - key, text, created, and updated\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.key).to.exist;\r",
									"    pm.expect(responseData.text).to.exist;\r",
									"    pm.expect(responseData.created).to.exist;\r",
									"    pm.expect(responseData.updated).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Key is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.key).to.be.a('number');\r",
									"    pm.expect(responseData.key).to.satisfy((key) => key >= 0, \"Key must be a non-negative integer\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"{{$randomPhrase}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}:{{Port}}/api/notes/{{note_id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"notes",
								"{{note_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('key');\r",
									"    pm.expect(responseData).to.have.property('text');\r",
									"    pm.expect(responseData).to.have.property('created');\r",
									"    pm.expect(responseData).to.have.property('updated');\r",
									"    pm.expect(responseData).to.have.property('userId');\r",
									"    pm.expect(responseData).to.have.property('user');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Key is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.key).to.be.a('number').and.to.satisfy((key) => key >= 0, \"Key must be a non-negative integer\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{Port}}/api/notes/{{note_id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"notes",
								"{{note_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"note_id\", pm.environment.get(\"note_id\") - 1);\r",
									"\r",
									"pm.test(\"Response status code is 204\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}:{{Port}}/api/notes/{{note_id}}",
							"host": [
								"{{base_url}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"notes",
								"{{note_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Port",
			"value": "8080"
		},
		{
			"key": "base_url",
			"value": "http://localhost",
			"type": "string"
		}
	]
}