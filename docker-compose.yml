services:
  db:
    container_name: postgres
    image: postgres:latest
    restart: always
    profiles:
      - ''
      - backend
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin} # Warning: Placeholder value, use .env file when deploying to server
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-root1234} # Warning: Placeholder value, use .env file when deploying to server
    env_file:
      - .env
    ports:
      - "5432:5432"
    expose:
      - "5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin}"]
      interval: 5s
      retries: 5
      start_period: 10s
      timeout: 3s

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    profiles:
      - ''
      - backend
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com} # Warning: Placeholder value, use .env file when deploying to server
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-root1234} # Warning: Placeholder value, use .env file when deploying to server
    env_file:
      - .env
    ports:
      - "5050:80"
    depends_on:
      - db
    volumes:
      - ./pgadmin-data:/pgadmin/

  api:
    build:
      context: .
    profiles:
      - ''
      - backend
    environment:
      - ASPNETCORE_URLS=http://+:80
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - ConnectionStrings__Postgres_Db=Server=db;Database=postgres;Port=5432;Timeout=30;CommandTimeout=60;Username=${POSTGRES_USER:-admin};Password=${POSTGRES_PASSWORD:-root1234} # Warning: Username and Password have placeholder value
      - JWT__SecurityKey=${JWT_SECURITY_KEY:-YourLocalDevelopmentKeyHere} # Warning: Placeholder value
      - JWT__Issuer=${APP_URL:-http://localhost:8080}
      - JWT__Audience=${DOMAIN_URL:-localhost:8080}
    env_file:
      - .env # Remember to create .env file with above placeholder values when you are deploying to server
    ports:
      - "8080:80"
    expose:
      - "8080"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./data-protection-keys:/root/.aspnet/DataProtection-Keys

  frontend:
    container_name: react-app
    build:
      context: ./clientapp
      dockerfile: Dockerfile
    profiles:
      - ''
      - frontend
    ports:
      - "3000:80"
    expose:
      - "3000"
    volumes:
      - ./clientapp:/app
      - /app/node_modules
    stdin_open: true
